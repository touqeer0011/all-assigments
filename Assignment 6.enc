{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Object-oriented programming (OOP) \n",
    "    refers to a type of computer programming (software design) in which programmers \n",
    "    define the data type of a data structure, and also the types of operations (functions)\n",
    "    that can be applied to the data structure."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#List down the Benefits of OOP?\n",
    "1) Modularity for easier troubleshooting. \n",
    "   Something has gone wrong, and you have no idea where to look\n",
    "    \n",
    "2)Reuse of code through inheritance.\n",
    "\n",
    "3)Flexibility through polymorphism.\n",
    "\n",
    "4)Effective problem solving."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Differentiate between function and method?\n",
    "\n",
    "#function:\n",
    "         A function is a piece of code that is called by name. It can be\n",
    "         passed data to operate on (parameters) and can optionally\n",
    "         return data (the return value). All data that is passed to a function is explicitly passed\n",
    "\n",
    "#method:\n",
    "        A method is a piece of code that is called by a name that is associated with an object.\n",
    "        In most respects it is identical to a function except for two key differences."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Define the following terms:\n",
    "1. Class\n",
    "2. Object\n",
    "3. Attribute\n",
    "4. Behavior\n",
    "\n",
    "\n",
    "#Class\n",
    "    object-oriented programming, a class is a blueprint for creating objects a particular data \n",
    "    structure), providing initial values for state (member variables or attributes), and implementations of behavior\n",
    "    member functions or methods. The user-defined objects are created using the class keyword.\n",
    "\n",
    "#object:\n",
    "       objects are the things you think about first in designing a program and \n",
    "       they are also the units of code that are eventually derived\n",
    "        from the process. Each object is an instance of a particular class or subclass with\n",
    "        the class own methods or procedures and data variables.\n",
    "        \n",
    "#attribute:\n",
    "          classes and objects have attributes. Attributes are data stored inside a class \n",
    "          or instance and represent the state or quality of the class or instance.\n",
    "          In short, attributes store information about the instance.\n",
    "            \n",
    "#behavior:\n",
    "         Behavior is the only way objects can do anything to themselves or have anything done to them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "civic \n",
      " 2013 \n",
      " gary \n",
      " 133 \n",
      " honda\n",
      "\t\t================\n",
      "vigo135 gig \n",
      " 2002 \n",
      " gary \n",
      " 133 \n",
      " honda\n",
      "\t\t================\n",
      "civic \n",
      " 2013 \n",
      " gray \n",
      " 178 \n",
      " toyota\n",
      "\t\t================\n",
      "civic \n",
      " 2013 \n",
      " Red \n",
      " 133 \n",
      " honda\n",
      "\t\t================\n",
      "Honda city \n",
      " 2016 \n",
      " Dark Blue \n",
      " 111 \n",
      " honda\n"
     ]
    }
   ],
   "source": [
    "class car():\n",
    "    \n",
    "    def __init__(self,model,color,name,hoursepower,company_name):\n",
    "        \n",
    "        self.model = model\n",
    "        self.color = color\n",
    "        self.name = name\n",
    "        self.hoursepower = hoursepower\n",
    "        self.company_name = company_name\n",
    "         \n",
    "        \n",
    "    def modelname(self,newmodel,newname):\n",
    "        self.model = newmodel\n",
    "        self.name = newname\n",
    "        \n",
    "    def powercompany(self,newhoursepower,newcompany_name):\n",
    "        self.hoursepower = newhoursepower\n",
    "        self.company_name = newcompany_name\n",
    "        \n",
    "    def carcolor(self,newcolor):\n",
    "        self.color = newcolor\n",
    "        \n",
    "        \n",
    "\n",
    "car1 = car(2013,'gary','civic',133,'honda')\n",
    "print(car1.name,'\\n',car1.model,'\\n',car1.color,'\\n',car1.hoursepower,'\\n',car1.company_name)\n",
    "\n",
    "car2 = car(2013,'gary','civic',133,'honda')\n",
    "car2.modelname(2002,'vigo135 gig')\n",
    "print(\"\\t\\t================\")\n",
    "print(car2.name,'\\n',car2.model,'\\n',car2.color,'\\n',car2.hoursepower,'\\n',car2.company_name)\n",
    "\n",
    "\n",
    "car3 = car(2013,'gray','civic',133,'honda')\n",
    "car3.powercompany(178,'toyota')\n",
    "print(\"\\t\\t================\")\n",
    "print(car3.name,'\\n',car3.model,'\\n',car3.color,'\\n',car3.hoursepower,'\\n',car3.company_name)\n",
    "\n",
    "car4 = car(2013,'gary','civic',133,'honda')\n",
    "car4.carcolor('Red')\n",
    "print(\"\\t\\t================\")\n",
    "print(car4.name,'\\n',car4.model,'\\n',car4.color,'\\n',car4.hoursepower,'\\n',car4.company_name)\n",
    "\n",
    "car5 = car(2013,'gary','civic',133,'honda')\n",
    "car5.modelname(2016,'Honda city')\n",
    "car5.powercompany(111,'honda')\n",
    "car5.carcolor('Dark Blue')\n",
    "print(\"\\t\\t================\")\n",
    "print(car5.name,'\\n',car5.model,'\\n',car5.color,'\\n',car5.hoursepower,'\\n',car5.company_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
