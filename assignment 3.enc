{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Your First Value 9\n",
      "Enter You Second Value 5\n",
      "Enter Your Operator +\n",
      "14 Answer\n"
     ]
    }
   ],
   "source": [
    "val1 = int(input(\"Enter Your First Value \"))\n",
    "val2 = int(input(\"Enter You Second Value \"))\n",
    "operator = input(\"Enter Your Operator \")\n",
    "\n",
    "if operator == \"+\":\n",
    " val = val1 + val2\n",
    " print(val,\"Answer\")\n",
    " \n",
    "elif operator == \"-\":\n",
    " val = val1 - val2\n",
    " print(val,\"Answer\")\n",
    " \n",
    "elif operator == \"*\":\n",
    " val = val1 * val2\n",
    " print(val,\"Answer\")\n",
    " \n",
    "elif operator == \"/\":\n",
    " val = val1 / val2\n",
    " print(val,\"Answer\")\n",
    " \n",
    "elif operator == \"**\":\n",
    " val = val1 ** val2\n",
    " print(val,\"Answer\")\n",
    "\n",
    "else:\n",
    "  print(\"Enter Correct operator\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['1', '2', '3', '4']\n",
      "['1', '2', '3', '4']\n",
      "['1', '2', '3', '4']\n",
      "['1', '2', '3', '4']\n",
      "['1', '2', '3', '4']\n",
      "['1', '2', '3', '4']\n"
     ]
    }
   ],
   "source": [
    "mylist=['1','Shah','2','Faraz','3','4']\n",
    "for item in mylist:\n",
    "    mynewlist =  [s for s in mylist if s.isdigit()]\n",
    "    print(mynewlist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Employee_ID': '001 ', 'Full Name': 'Shah Faraz', 'Father Name': 'Hameed', 'Salary': '50000'}\n"
     ]
    }
   ],
   "source": [
    "Employee = {\"Employee_ID\": \"001 \",\n",
    "            \"Full Name\": \"Shah Faraz\",\n",
    "            \"Father Name\": \"Hameed\",\n",
    "           }\n",
    "Employee[\"Salary\"] = \"50000\"\n",
    "print(Employee)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50\n"
     ]
    }
   ],
   "source": [
    "Data = {'val1':15,'val2':15,'val3':20}\n",
    "print(sum(Data.values()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 99]\n"
     ]
    }
   ],
   "source": [
    "Data_check_dup = [ 1, 30, 8, 7, 3, 1, 15, 99, 45, 5, 12, 99]\n",
    "dupItems = []\n",
    "uniqItems = {}\n",
    "for x in Data_check_dup:\n",
    "   if x not in uniqItems:\n",
    "      uniqItems[x] = 1\n",
    "   else:\n",
    "      if uniqItems[x] == 1:\n",
    "         dupItems.append(x)\n",
    "      uniqItems[x] += 1\n",
    "print(dupItems)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Key is present in the dictionary\n",
      "Key is not present in the dictionary\n"
     ]
    }
   ],
   "source": [
    "a = {1: 5, 2: 10, 3: 15, 4: 20, 5: 25, 6: 30}\n",
    "def is_key_present(x):\n",
    "  if x in a:\n",
    "      print('Key is present in the dictionary')\n",
    "  else:\n",
    "      print('Key is not present in the dictionary')\n",
    "is_key_present(5)\n",
    "is_key_present(17)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
